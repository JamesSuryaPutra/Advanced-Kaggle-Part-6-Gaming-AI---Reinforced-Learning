<Introduction>
In the tutorial, you learned how to build a reasonably intelligent agent with the minimax algorithm. In this exercise, you will check your understanding and submit your own agent to the com
petition.

****************
from learntools.core import binder
binder.bind(globals())
from learntools.game_ai.ex3 import *
****************

<1st step: A closer look>
The heuristic from the tutorial looks at all groups of four adjacent grid locations on the same row, column, or diagonal and assigns points for each occurrence of the following patterns. Is
it really necessary to use so many numbers to define the heuristic? Consider simplifying it.

How would each heuristic score the potential moves in the example below (where, in this case, the agent looks only one step ahead)? Which heuristic would lead to the agent selecting the bet
ter move?

****************
q_1.hint()

Hint:
The first heuristic assigns a score of 0 to column 2, and a score of -99 to column 3. What scores do you get with the second heuristic?

# Check your answer (Run this code cell to receive credit!)
q_1.solution()

Solution:
The first heuristic is guaranteed to select column 2 to block the opponent from winning. The second heuristic selects either column 2 or column 3 (where it selects each with 50% probabili
ty). Thus, for this game board, the first heuristic is better. In general, we can expect that the first heuristic is a better heuristic, since we cannot trust the second heuristic to
block the opponent from winning.
****************

<2nd step: Count the leaves>
In the tutorial, we worked with a small game tree. The game tree has 8 leaf nodes that appear at the bottom of the tree. By definition, "leaf nodes" in a game tree are nodes that don't
have nodes below them.

In the ConnectX competition, the game trees will be much larger! To see this, consider a minimax agent that is trying to plan its first move, where all columns in the game board are emp
ty. Say the agent builds a game tree of depth 3. How many leaf nodes are in the game tree? Use your answer to fill in the blank below.

****************
# Fill in the blank
num_leaves = 7*7*7
â€‹
# Check your answer
q_2.check()

Correct

# Lines below will give you a hint or solution code
q_2.hint()
q_2.solution()

Hint:
Try drawing the game tree. How many moves (columns) are possible at each turn?

Solution:
num_leaves = 7*7*7
****************

<3rd step: Which move will the agent select?>
In this question, you'll check your understanding of the minimax algorithm. Remember that with this algorithm:
"The agent chooses moves to get a score that is as high as possible, and it assumes the opponent will counteract this by choosing moves to force the score to be as low as possible."

Which move will the agent select? Use your answer to set the value of the selected_move variable below. Your answer should be one of 1, 2, or 3.

****************
# Fill in the blank
selected_move = 3

# Check your answer
q_3.check()

Correct

# Lines below will give you a hint or solution code
q_3.hint()
q_3.solution()

Hint:
For each potential move, how will the opponent respond?

Solution:
selected_move = 3
****************

<4th step: Examine the assumptions>
The minimax agent assumes that its opponent plays optimally (with respect to the heuristic, and using a game tree of limited depth). But this is almost never the case, in practice: it's
far more likely for the agent to encounter a suboptimal (that is, worse than optimal) opponent.

Say the minimax agent encounters a suboptimal opponent. Should we expect the minimax agent to still play the game well, despite the contradiction with its assumptions? If so, why?

****************
q_4.hint()

Hint:
What happened in the tutorial when the minimax agent played against a random opponent?

# Check your answer (Run this code cell to receive credit!)
q_4.solution()

Solution:
We can still expect the minimax agent to perform well. On a high level, assuming an optimal opponent simply overestimates the opponent, but does not break the algorithm. The effect of
overestimating the opponent is merely that the minimax agent will take longer to win, than if it had a more accurate understanding of its opponent. For instance, the minimax agent is
highly unlikely to select the same column three times in its first three moves (since it assumes an optimal opponent that will certainly block the winning play in the next move), but
this is not a bad initial strategy for playing against an agent that selects columns completely at random.
****************

<5th step: Submit to the competition>
Now, it's time to submit an agent to the competition! Use the next code cell to define an agent (you can see an example of how to write a valid agent in this notebook).

If you decide to use the minimax code from the tutorial, you might like to add alpha-beta pruning to decrease the computation time (i.e., get the minimax algorithm to run much faster!).
In this case, "alpha" and "beta" to refer to two values that are maintained while the algorithm is running, that help to identify early stopping conditions.

Without alpha-beta pruning, minimax evaluates each leaf node. With alpha-beta pruning, minimax only evaluates nodes that could provide information that affects the agent's choice of act
ion. Put another way, it identifies nodes that could not possibly affect the final result and avoids evaluating them.

****************
def my_agent(obs, config):
    import random
    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]
    return random.choice(valid_moves)

def score_move(grid, col, mark, config, nsteps):
    next_grid = drop_piece(grid, col, mark, config)
    score = minimax(next_grid, nsteps-1, False, mark, config)
    return score

# Run this code cell to get credit for creating an agent
q_5.check()

Thank you for creating an agent!
****************

****************
import inspect
import os

def write_agent_to_file(function, file):
    with open(file, "a" if os.path.exists(file) else "w") as f:
        f.write(inspect.getsource(function))
        print(function, "written to", file)

write_agent_to_file(my_agent, "submission.py")

<function my_agent at 0x7df90d076710> written to submission.py
****************

Then, follow these steps to submit your agent to the competition:
1} Begin by clicking on the Save Version button in the top right corner of the window. This will generate a pop-up window.
2} Ensure that the Save and Run All option is selected, and then click on the Save button.
3} This generates a window in the bottom left corner of the notebook. After it has finished running, click on the number to the right of the Save Version button. This pulls up a list of
versions on the right of the screen. Click on the ellipsis (...) to the right of the most recent version, and select Open in Viewer. This brings you into view mode of the same page. You
will need to scroll down to get back to these instructions.
4} Click on the Data tab near the top of the screen. Then, click on the file you would like to submit, and click on the Submit button to submit your results to the leaderboard.

You have now successfully submitted to the competition!

If you want to keep working to improve your performance, select the Edit button in the top right of the screen. Then, you can change your code and repeat the process. There's a lot of
room to improve, and you will climb up the leaderboard as you work.

Go to "My Submissions" to view your score and episodes being played.
